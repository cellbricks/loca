// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlindSigClient is the client API for BlindSig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlindSigClient interface {
	GetToken(ctx context.Context, in *Padding, opts ...grpc.CallOption) (*Token, error)
}

type blindSigClient struct {
	cc grpc.ClientConnInterface
}

func NewBlindSigClient(cc grpc.ClientConnInterface) BlindSigClient {
	return &blindSigClient{cc}
}

func (c *blindSigClient) GetToken(ctx context.Context, in *Padding, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/proto.BlindSig/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlindSigServer is the server API for BlindSig service.
// All implementations must embed UnimplementedBlindSigServer
// for forward compatibility
type BlindSigServer interface {
	GetToken(context.Context, *Padding) (*Token, error)
	mustEmbedUnimplementedBlindSigServer()
}

// UnimplementedBlindSigServer must be embedded to have forward compatible implementations.
type UnimplementedBlindSigServer struct {
}

func (UnimplementedBlindSigServer) GetToken(context.Context, *Padding) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedBlindSigServer) mustEmbedUnimplementedBlindSigServer() {}

// UnsafeBlindSigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlindSigServer will
// result in compilation errors.
type UnsafeBlindSigServer interface {
	mustEmbedUnimplementedBlindSigServer()
}

func RegisterBlindSigServer(s grpc.ServiceRegistrar, srv BlindSigServer) {
	s.RegisterService(&BlindSig_ServiceDesc, srv)
}

func _BlindSig_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Padding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlindSigServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BlindSig/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlindSigServer).GetToken(ctx, req.(*Padding))
	}
	return interceptor(ctx, in, info, handler)
}

// BlindSig_ServiceDesc is the grpc.ServiceDesc for BlindSig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlindSig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlindSig",
	HandlerType: (*BlindSigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _BlindSig_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/blindsig/proto/blindsig.proto",
}
